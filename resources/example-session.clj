;; ## cmp.core Namespace
;; Change to the `cmp.core` name space

(in-ns 'cmp.core)
;;`#namespace[cmp.core]`

;; A list of the functions available in `cmp.core`
;; is generated by:

(dir cmp.core)
;;`c-info`
;;`c-mon`
;;`c-reset`
;;`c-run`
;;`c-status`
;;`c-stop`
;;`c-suspend`
;;`check`
;;...
;;`workon!`

;; Clojures `doc`-function may be used to read the
;; funtions documentation:

(doc c-info)

;; ;`cmp.core/c-info`
;; ;
;; ;`([] [i] [mp-id i])`
;; ;
;; ; Returns a info map about the `i`th container of
;; ; the mpd with the id `mp-id`.



;;## The reference definition mpd-ref.edn

;; On a fresh system try to
;; build and load the **reference** measurement
;; program definition `ref`.

;; This definition is stored in edn format
;; (see [mpd-ref.edn](../resources/mpd-ref.edn).
;; The function

(m-build-edn)

;; loads and builds the mpd(s) defined in the cmp
;; configuration file [resources/config.edn](../resources/config.edn)
;; under the keyword `:edn-mpds`.

;;## Set the definition to work on

;; Most api functions in the `cmp.core` namespace
;; need the `id` of the mpd to work on.

;; After

(workon! "ref")

;; the command

(c-info "ref" 1)

;; is the same as

(c-info 1)

;; `(workon! "ref")` stores the `mp-id` argument in
;; an `atom` called `current-mp-id`

(deref current-mp-id)
"ref"

;; With a defined `current-mp-id`, the  `mp-id` argument
;; may be skiped for most of the `cmp.core` functions.

(m-info)
;; returns
{:mp-id "ref"
 :mp-descr "Simple measurement programm definition (mpd) ..."
 :mp-std "NN"
 :mp-ncont 7
 :mp-ndefins 3}

;;## Build the tasks

;; to be continued

;;cut from README:

;;---------8<------------

;;## tasks
;;
;;Build or refresh tasks with:
;;
;;```clojure
;;(t-refresh)
;;```
;;
;;Build `tasks` provided by *cmp* in `edn`-format with:
;;
;;```clojure
;;(t-build-edn)
;;```
;;
;;`(t-table)` overview of all tasks loaded in short term memory.
;;The table may be filtered:
;;
;;![cmp](./t-table.png)
;;
;;
;;
;;## start mpd
;;
;;```clojure
;;(workon! "ref")
;;(m-start)
;;```
;;
;;## run container
;;
;;Run the first *container* with:
;;
;;```clojure
;;(c-run 0)
;;;; same as:
;;(ctrl 0 "run")
;;```
;;
;;## go on
;;
;;Use the build-in `(doc x)` function (e.g. `(doc t-build)`) for further
;;details.
;;
;;```clojure
;;(doc t-build)
;;-------------------------
;;cmp.core/t-build
;;([])
;;  Builds the `tasks` endpoint. At
;;  runtime all `tasks` are provided by
;;  `st-mem`
;;```
;;
;;Use the build-in `(dir cmp.core)` function to get a list of all
;;functions in this namespace.
;;
;;## documents
;;
;;To add or rm documents for storing data in use `(d-add mp-id doc-id)`,
;;`(d-rm mp-id doc-id)`.  If `(->mp-id)` is set (by `(workon mp-id)`)
;;`(d-add doc-id)`, `(d-rm doc-id)` is sufficient.
;;
;;```clojure
;;(d-add "cal-2020-se3-kk-11111_0002")
;;;; hiob DEBUG [cmp.lt-mem:14] - try to get document
;;;;             with id: cal-2020-se3-kk-11111_0002
;;;; "OK"
;;(d-ids)
;;;; (cal-2020-se3-kk-11111_0001 cal-2020-se3-kk-11111_0002)
;;```
;;